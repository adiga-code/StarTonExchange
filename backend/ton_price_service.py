import httpx
import logging
from datetime import datetime, timedelta
from typing import Optional

logger = logging.getLogger(__name__)

class TONPriceService:
    def __init__(self):
        self.last_price: Optional[float] = None
        self.last_update: Optional[datetime] = None

    async def get_current_ton_price_rub(self, storage) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É TON –≤ —Ä—É–±–ª—è—Ö —Å –Ω–∞—Ü–µ–Ω–∫–æ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            cache_minutes_str = await storage.get_cached_setting("ton_price_cache_minutes")
            cache_minutes = float(cache_minutes_str) if cache_minutes_str and cache_minutes_str.strip() else 15.0
            
            markup_str = await storage.get_cached_setting("ton_markup_percentage") 
            markup = float(markup_str) if markup_str and markup_str.strip() else 5.0
            
            fallback_str = await storage.get_cached_setting("ton_fallback_price")
            fallback = float(fallback_str) if fallback_str and fallback_str.strip() else 420.0
            
            logger.info(f"üîß TON –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: cache_minutes={cache_minutes}, markup={markup}%, fallback={fallback}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
            cache_expiry = timedelta(minutes=cache_minutes)
            need_update = (
                self.last_price is None or 
                self.last_update is None or 
                datetime.utcnow() - self.last_update > cache_expiry
            )
            
            if need_update:
                logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å TON...")
                await self._update_price_from_api(markup, fallback)
            else:
                logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É TON: {self.last_price:.2f} RUB")
            
            return self.last_price if self.last_price else fallback
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã TON: {e}")
            fallback_str = await storage.get_cached_setting("ton_fallback_price")
            fallback = float(fallback_str) if fallback_str and fallback_str.strip() else 420.0
            return fallback

    async def force_update_price(self, storage):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É TON"""
        markup_str = await storage.get_cached_setting("ton_markup_percentage") 
        markup = float(markup_str) if markup_str and markup_str.strip() else 5.0
        
        fallback_str = await storage.get_cached_setting("ton_fallback_price")
        fallback = float(fallback_str) if fallback_str and fallback_str.strip() else 420.0
        
        await self._update_price_from_api(markup, fallback)
        return self.last_price

    async def _update_price_from_api(self, markup: float, fallback: float):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Å –≤–Ω–µ—à–Ω–∏—Ö API"""
        try:
            async with httpx.AsyncClient() as client:
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON/USD —Å Binance
                logger.info("üì° –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ TON/USD...")
                ton_response = await client.get(
                    "https://api.binance.com/api/v3/ticker/price?symbol=TONUSDT", 
                    timeout=10
                )
                
                if ton_response.status_code != 200:
                    raise Exception(f"Binance API error: {ton_response.status_code}")
                    
                ton_usd = float(ton_response.json()["price"])
                logger.info(f"üìà TON/USD: ${ton_usd}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD/RUB
                logger.info("üì° –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ USD/RUB...")
                usd_response = await client.get(
                    "https://api.exchangerate-api.com/v4/latest/USD", 
                    timeout=10
                )
                
                if usd_response.status_code != 200:
                    raise Exception(f"Exchange rate API error: {usd_response.status_code}")
                    
                usd_rub = usd_response.json()["rates"]["RUB"]
                logger.info(f"üí± USD/RUB: {usd_rub}")
                
                # –°—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
                base_price = ton_usd * usd_rub
                final_price = base_price * (1 + markup / 100)
                
                self.last_price = final_price
                self.last_update = datetime.utcnow()
                
                logger.info(f"‚úÖ TON —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {base_price:.2f} RUB + {markup}% = {final_price:.2f} RUB")
                return final_price
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback, –Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if not self.last_price:
                self.last_price = fallback
                logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ü–µ–Ω—É: {fallback} RUB")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ton_price_service = TONPriceService()