import asyncio
import logging
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.enums import ParseMode

# Load environment variables
load_dotenv()

# Add backend directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import AsyncSessionLocal, init_db, init_default_data
from storage import Storage
from models import User
from schemas import UserCreate

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot token and webapp URL from environment
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-app.com')

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")
    sys.exit(1)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
def log_event(event_type: str, details: str):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª"""
    try:
        os.makedirs("logs", exist_ok=True)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - {event_type} - {details}\n"
        
        with open("logs/admin.log", "a", encoding="utf-8") as f:
            f.write(log_entry)
            f.flush()
    except Exception as e:
        logger.error(f"Failed to write log: {e}")

async def get_or_create_user(telegram_user) -> User:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    async with AsyncSessionLocal() as session:
        storage = Storage(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db_user = await storage.get_user_by_telegram_id(str(telegram_user.id))
        
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = UserCreate(
                telegram_id=str(telegram_user.id),
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name
            )
            db_user = await storage.create_user(user_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            log_event("USER_REGISTERED", 
                     f"telegram_id: {telegram_user.id} username: {telegram_user.username or 'None'}")
            
            logger.info(f"New user registered: {telegram_user.id}")
        
        return db_user

async def get_dynamic_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
    async with AsyncSessionLocal() as session:
        storage = Storage(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        referral_setting = await storage.get_setting("referral_percentage")
        news_channel_setting = await storage.get_setting("news_channel_url")
        
        return {
            "referral_percentage": referral_setting.value if referral_setting else "10",
            "news_channel_url": news_channel_setting.value if news_channel_setting else "https://t.me/starsexchange_news"
        }

@router.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    user = message.from_user
    
    if not user:
        logger.error("No user information in start command")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await get_or_create_user(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await get_dynamic_settings()
        
        # Create inline keyboard with Web App button
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Stars Exchange",
                        web_app=WebAppInfo(url=WEBAPP_URL)
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üì¢ –ù–æ–≤–æ—Å—Ç–∏",
                        url=settings["news_channel_url"]
                    )
                ]
            ]
        )
        
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stars Exchange!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üî• <b>–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ:</b>
‚≠ê –ü–æ–∫—É–ø–∞—Ç—å Telegram Stars —Å–æ —Å–∫–∏–¥–∫–æ–π
üíé –û–±–º–µ–Ω–∏–≤–∞—Ç—å TON Coin
üéÅ –í—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã
üë• –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö

üöÄ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>
        """
        
        await message.answer(
            welcome_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_command(message: Message):
    """Handle balance inquiry"""
    user = message.from_user
    
    try:
        db_user = await get_or_create_user(user)
        
        balance_text = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>

‚≠ê Telegram Stars: <b>{db_user.stars_balance}</b>
üíé TON Balance: <b>{db_user.ton_balance}</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üéØ –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{db_user.tasks_completed}</b>
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>0</b>
üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{db_user.total_stars_earned} –∑–≤–µ–∑–¥</b>
        """
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=WEBAPP_URL)
                    )
                ]
            ]
        )
        
        await message.answer(balance_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in balance command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìà –ó–∞–¥–∞–Ω–∏—è")
async def tasks_command(message: Message):
    """Handle tasks inquiry"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéØ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}#tasks")
                )
            ]
        ]
    )
    
    tasks_text = """
üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>

üí° <b>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã!</b>

–û—Ç–∫—Ä—ã–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
    """
    
    await message.answer(tasks_text, reply_markup=keyboard)

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_command(message: Message):
    """Handle referrals inquiry"""
    user = message.from_user
    
    try:
        db_user = await get_or_create_user(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await get_dynamic_settings()
        referral_percentage = settings["referral_percentage"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_info = await bot.get_me()
        referral_link = f"https://t.me/{bot_info.username}?start=ref{db_user.referral_code}"
        
        referrals_text = f"""
üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üí∞ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ {referral_percentage}% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–∑–µ–π!</b>

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>{referral_link}</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>0</b>
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{db_user.total_referral_earnings} –∑–≤–µ–∑–¥</b>

üí° <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ!</b>
        """
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                        switch_inline_query=f"–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ—Ç –∫—Ä—É—Ç–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ Stars –∏ TON! {referral_link}"
                    )
                ]
            ]
        )
        
        await message.answer(referrals_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in referrals command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Stars Exchange</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
üí∞ –ë–∞–ª–∞–Ω—Å - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
üìà –ó–∞–¥–∞–Ω–∏—è - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ Telegram Stars —Å–æ —Å–∫–∏–¥–∫–æ–π
‚Ä¢ –û–±–º–µ–Ω TON Coin
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!
    """
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer(help_text, reply_markup=keyboard)

@router.message()
async def default_handler(message: Message):
    """Handle all other messages"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Stars Exchange",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer(
        "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Stars Exchange:",
        reply_markup=keyboard
    )

async def setup_bot():
    """Initialize bot database and settings"""
    try:
        await init_db()
        await init_default_data()
        logger.info("Bot database initialized")
    except Exception as e:
        logger.error(f"Error initializing bot database: {e}")
        raise

async def main():
    """Main function to run the bot"""
    try:
        # Setup bot
        await setup_bot()
        
        # Start polling
        logger.info("Starting bot...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error running bot: {e}")
        raise
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())