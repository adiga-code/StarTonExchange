import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from database import AsyncSessionLocal, init_db, init_default_data
from storage import Storage
from schemas import UserCreate

# Load environment variables
load_dotenv()

# Bot configuration
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-app.com')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in environment variables")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def get_or_create_user(telegram_user) -> bool:
    """Get or create user in database"""
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        
        # Check if user exists
        existing_user = await storage_instance.get_user_by_telegram_id(str(telegram_user.id))
        
        if not existing_user:
            # Create new user
            user_data = UserCreate(
                telegram_id=str(telegram_user.id),
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
            )
            
            try:
                new_user = await storage_instance.create_user(user_data)
                logger.info(f"Created new user: {new_user.id} (Telegram ID: {telegram_user.id})")
                return True
            except Exception as e:
                logger.error(f"Error creating user: {e}")
                return False
        else:
            logger.info(f"User already exists: {existing_user.id} (Telegram ID: {telegram_user.id})")
            return True

@router.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    user = message.from_user
    
    # Create or get user
    user_created = await get_or_create_user(user)
    
    if not user_created:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # Create inline keyboard with Web App button
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Stars Exchange",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¢ –ù–æ–≤–æ—Å—Ç–∏",
                    url="https://t.me/starsexchange_news"
                )
            ]
        ]
    )
    
    welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stars Exchange!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üî• <b>–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ:</b>
‚≠ê –ü–æ–∫—É–ø–∞—Ç—å Telegram Stars
üíé –û–±–º–µ–Ω–∏–≤–∞—Ç—å TON Coin
üéÅ –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã
üë• –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö

üí∞ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>
‚Ä¢ –ë–æ–Ω—É—Å +10 –∑–≤–µ–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
‚Ä¢ 25 –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ 50 –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª

üöÄ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>
    """
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_command(message: Message):
    """Handle balance inquiry"""
    user = message.from_user
    
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        db_user = await storage_instance.get_user_by_telegram_id(str(user.id))
        
        if not db_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        balance_text = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>

‚≠ê Telegram Stars: <b>{db_user.stars_balance}</b>
üíé TON Balance: <b>{db_user.ton_balance}</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üéØ –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{db_user.tasks_completed}</b>
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{db_user.total_referral_earnings}</b>
üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{db_user.total_stars_earned} –∑–≤–µ–∑–¥</b>
        """
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=WEBAPP_URL)
                    )
                ]
            ]
        )
        
        await message.answer(balance_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "üìà –ó–∞–¥–∞–Ω–∏—è")
async def tasks_command(message: Message):
    """Handle tasks inquiry"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéØ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}#tasks")
                )
            ]
        ]
    )
    
    tasks_text = """
üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>

‚≠ê <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ:</b>
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥: +10 –∑–≤–µ–∑–¥

üéÅ <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞: +25 –∑–≤–µ–∑–¥
‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: +50 –∑–≤–µ–∑–¥

üí° <b>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!</b>
    """
    
    await message.answer(tasks_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_command(message: Message):
    """Handle referrals inquiry"""
    user = message.from_user
    
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        db_user = await storage_instance.get_user_by_telegram_id(str(user.id))
        
        if not db_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        referral_link = f"https://t.me/{(await bot.get_me()).username}?start=ref{db_user.referral_code}"
        
        referrals_text = f"""
üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üí∞ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 10% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–∑–µ–π!</b>

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>{referral_link}</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>0</b>
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{db_user.total_referral_earnings} –∑–≤–µ–∑–¥</b>

üí° <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ!</b>
        """
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                        switch_inline_query=f"–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ—Ç –∫—Ä—É—Ç–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ Stars –∏ TON! {referral_link}"
                    )
                ]
            ]
        )
        
        await message.answer(referrals_text, reply_markup=keyboard, parse_mode="HTML")

@router.message()
async def default_handler(message: Message):
    """Handle all other messages"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Stars Exchange",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer(
        "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Stars Exchange:",
        reply_markup=keyboard
    )

async def main():
    """Main function to run the bot"""
    try:
        # Start polling
        logger.info("Starting bot...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error running bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())