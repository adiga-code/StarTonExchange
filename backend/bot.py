import asyncio
import logging
import os
import re
from datetime import date
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from database import AsyncSessionLocal, init_db, init_default_data
from storage import Storage
from schemas import UserCreate

# Load environment variables
load_dotenv()

# Bot configuration
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-app.com')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in environment variables")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def get_or_create_user(telegram_user, referral_code=None) -> bool:
    """Get or create user in database"""
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        
        # Check if user exists
        existing_user = await storage_instance.get_user_by_telegram_id(str(telegram_user.id))
        
        if not existing_user:
            # Generate referral code for new user
            import random
            import string
            new_referral_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            
            # Create new user
            user_data = UserCreate(
                telegram_id=str(telegram_user.id),
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
                referral_code=new_referral_code,
                referred_by=referral_code
            )
            
            try:
                new_user = await storage_instance.create_user(user_data)
                logger.info(f"Created new user: {new_user.id} (Telegram ID: {telegram_user.id})")
                
                # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await handle_daily_login(new_user.id)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –¥–∞—Ç—å –µ–º—É –±–æ–Ω—É—Å
                if referral_code:
                    await storage_instance.process_referral_bonus(referral_code, 25)
                
                return True
            except Exception as e:
                logger.error(f"Error creating user: {e}")
                return False
        else:
            logger.info(f"User already exists: {existing_user.id} (Telegram ID: {telegram_user.id})")
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await handle_daily_login(existing_user.id)
            
            return True

async def handle_daily_login(user_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        
        # –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        daily_login_task = await storage_instance.get_daily_login_task()
        
        if daily_login_task:
            # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å UserTask —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await storage_instance.ensure_user_task_exists(user_id, daily_login_task.id)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è
            completed_today = await storage_instance.check_daily_task_completion(
                user_id, daily_login_task.id
            )
            
            if not completed_today:
                # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                await storage_instance.complete_user_task(user_id, daily_login_task.id)
                await storage_instance.add_user_stars(user_id, daily_login_task.reward)
                
                logger.info(f"Daily login completed for user {user_id}, reward: {daily_login_task.reward}")

@router.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    user = message.from_user
    
    # –ò–∑–≤–ª–µ—á—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    referral_code = None
    if message.text and len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        if start_param.startswith('ref'):
            referral_code = start_param[3:]  # –£–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å 'ref'
    
    # Create or get user
    user_created = await get_or_create_user(user, referral_code)
    
    if not user_created:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # Create inline keyboard with Web App button
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Stars Exchange",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¢ –ù–æ–≤–æ—Å—Ç–∏",
                    url="https://t.me/starsexchange_news"
                )
            ]
        ]
    )
    
    welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stars Exchange!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üî• <b>–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ:</b>
‚≠ê –ü–æ–∫—É–ø–∞—Ç—å Telegram Stars
üíé –û–±–º–µ–Ω–∏–≤–∞—Ç—å TON Coin
üéÅ –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã
üë• –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö

üí∞ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>
‚Ä¢ –ë–æ–Ω—É—Å +10 –∑–≤–µ–∑–¥ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
‚Ä¢ 25 –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ 50 –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª

üöÄ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>
    """
    
    if referral_code:
        welcome_text += f"\n\nüéâ <b>–í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!</b>\n–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å –∑–∞ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_command(message: Message):
    """Handle balance inquiry"""
    user = message.from_user
    
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        db_user = await storage_instance.get_user_by_telegram_id(str(user.id))
        
        if not db_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        balance_text = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>

‚≠ê Telegram Stars: <b>{db_user.stars_balance}</b>
üíé TON Balance: <b>{db_user.ton_balance}</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üéØ –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{db_user.tasks_completed}</b>
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{len(await storage_instance.get_user_referrals(db_user.id))}</b>
üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{db_user.total_stars_earned} –∑–≤–µ–∑–¥</b>
üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{db_user.total_referral_earnings} –∑–≤–µ–∑–¥</b>
        """
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=WEBAPP_URL)
                    )
                ]
            ]
        )
        
        await message.answer(balance_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "üìà –ó–∞–¥–∞–Ω–∏—è")
async def tasks_command(message: Message):
    """Handle tasks inquiry"""
    user = message.from_user
    
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        db_user = await storage_instance.get_user_by_telegram_id(str(user.id))
        
        if not db_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        user_tasks = await storage_instance.get_user_tasks_with_task_info(db_user.id)
        active_tasks = await storage_instance.get_active_tasks()
        
        tasks_text = "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
        
        daily_tasks = [t for t in user_tasks if t.get('type') == 'daily']
        social_tasks = [t for t in user_tasks if t.get('type') == 'social']
        referral_tasks = [t for t in user_tasks if t.get('type') == 'referral']
        
        if daily_tasks:
            tasks_text += "‚≠ê <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ:</b>\n"
            for task in daily_tasks:
                status = "‚úÖ" if task['completed'] else "‚è∞"
                tasks_text += f"{status} {task['title']}: +{task['reward']} –∑–≤–µ–∑–¥\n"
            tasks_text += "\n"
        
        if social_tasks:
            tasks_text += "üéÅ <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ:</b>\n"
            for task in social_tasks:
                status = "‚úÖ" if task['completed'] else "‚è∞"
                tasks_text += f"{status} {task['title']}: +{task['reward']} –∑–≤–µ–∑–¥\n"
            tasks_text += "\n"
        
        if referral_tasks:
            tasks_text += "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ:</b>\n"
            for task in referral_tasks:
                status = "‚úÖ" if task['completed'] else "‚è∞"
                tasks_text += f"{status} {task['title']}: +{task['reward']} –∑–≤–µ–∑–¥\n"
            tasks_text += "\n"
        
        tasks_text += "üí° <b>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!</b>"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéØ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}#tasks")
                )
            ]
        ]
    )
    
    await message.answer(tasks_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_command(message: Message):
    """Handle referrals inquiry"""
    user = message.from_user
    
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        db_user = await storage_instance.get_user_by_telegram_id(str(user.id))
        
        if not db_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        referrals = await storage_instance.get_user_referrals(db_user.id)
        referral_link = f"https://t.me/{(await bot.get_me()).username}?start=ref{db_user.referral_code}"
        
        referrals_text = f"""
üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üí∞ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 10% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–∑–µ–π!</b>

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>{referral_link}</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{len(referrals)}</b>
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{db_user.total_referral_earnings} –∑–≤–µ–∑–¥</b>

üí° <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ!</b>
        """
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
        if referrals:
            referrals_text += "\n\nüë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
            for ref in referrals[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
                ref_name = ref.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if ref.username:
                    ref_name += f" (@{ref.username})"
                referrals_text += f"‚Ä¢ {ref_name}\n"
            
            if len(referrals) > 10:
                referrals_text += f"... –∏ –µ—â–µ {len(referrals) - 10}\n"
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                        switch_inline_query=f"–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ—Ç –∫—Ä—É—Ç–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ Stars –∏ TON! {referral_link}"
                    )
                ]
            ]
        )
        
        await message.answer(referrals_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_command(message: Message):
    """Handle settings inquiry"""
    user = message.from_user
    
    async with AsyncSessionLocal() as session:
        storage_instance = Storage(session)
        db_user = await storage_instance.get_user_by_telegram_id(str(user.id))
        
        if not db_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: {db_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{db_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ ID: <code>{db_user.telegram_id}</code>
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {db_user.created_at.strftime('%d.%m.%Y')}

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
{"‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if db_user.notifications_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {(date.today() - db_user.created_at.date()).days}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–í—ã—Å–æ–∫–∞—è' if db_user.tasks_completed > 10 else '–°—Ä–µ–¥–Ω—è—è' if db_user.tasks_completed > 5 else '–ù–∏–∑–∫–∞—è'}
        """
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=f"{WEBAPP_URL}#profile")
                    )
                ]
            ]
        )
        
        await message.answer(settings_text, reply_markup=keyboard, parse_mode="HTML")

@router.message()
async def default_handler(message: Message):
    """Handle all other messages"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Stars Exchange",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    help_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stars Exchange!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
üí∞ –ë–∞–ª–∞–Ω—Å - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å
üìà –ó–∞–¥–∞–Ω–∏—è - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É:
    """
    
    await message.answer(
        help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    from aiogram.types import BotCommand
    
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="tasks", description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"),
        BotCommand(command="referrals", description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"),
    ]
    
    await bot.set_my_commands(commands)

async def main():
    """Main function to run the bot"""
    try:
        # Initialize database
        await init_db()
        await init_default_data()
        logger.info("Database initialized")
        
        # Setup bot commands
        await setup_bot_commands()
        logger.info("Bot commands set up")
        
        # Start polling
        logger.info("Starting bot...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error running bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())