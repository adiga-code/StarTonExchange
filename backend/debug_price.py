#!/usr/bin/env python3
"""
Debug script –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ TON –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ main.py –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import AsyncSessionLocal, init_db, init_default_data
from models import Setting
from storage import Storage
from ton_price_service import ton_price_service
from sqlalchemy import select

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def fix_ton_settings():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TON"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TON –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–∞–∑–µ
    ton_settings = {
        "ton_markup_percentage": "5.0",
        "ton_price_cache_minutes": "15", 
        "ton_fallback_price": "420.0",
        "referral_registration_bonus": "25.0"
    }
    
    async with AsyncSessionLocal() as session:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TON –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        fixed_count = 0
        for key, default_value in ton_settings.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            result = await session.execute(
                select(Setting).where(Setting.key == key)
            )
            existing_setting = result.scalar_one_or_none()
            
            if existing_setting:
                if not existing_setting.value or existing_setting.value.strip() == "":
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    existing_setting.value = default_value
                    fixed_count += 1
                    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {key}: {default_value}")
                else:
                    logger.info(f"‚ÑπÔ∏è  {key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_setting.value}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                new_setting = Setting(key=key, value=default_value)
                session.add(new_setting)
                fixed_count += 1
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {key}: {default_value}")
        
        if fixed_count > 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {fixed_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.info("‚ÑπÔ∏è  –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TON —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        return fixed_count

async def test_ton_price():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON"""
    try:
        async with AsyncSessionLocal() as session:
            storage = Storage(session)
            
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
            price = await ton_price_service.get_current_ton_price_rub(storage)
            logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å TON: {price:.2f} RUB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            markup = await storage.get_cached_setting("ton_markup_percentage")
            cache_minutes = await storage.get_cached_setting("ton_price_cache_minutes")
            fallback = await storage.get_cached_setting("ton_fallback_price")
            
            logger.info(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TON:")
            logger.info(f"   - –ù–∞—Ü–µ–Ω–∫–∞: {markup}%")
            logger.info(f"   - –ö—ç—à: {cache_minutes} –º–∏–Ω—É—Ç")
            logger.info(f"   - –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ü–µ–Ω–∞: {fallback} RUB")
            
            return price > 0
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ TON: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è debug —Å–∫—Ä–∏–ø—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ debug_price.py...")
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        await init_default_data()
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TON
        fixed_count = await fix_ton_settings()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å TON
        ton_working = await test_ton_price()
        
        # 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
        logger.info(f"   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TON: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        logger.info(f"   {'‚úÖ' if ton_working else '‚ùå'} –ö—É—Ä—Å TON: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if ton_working else '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        
        if fixed_count > 0:
            logger.info("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        logger.info("‚úÖ Debug —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)