import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { useTelegram } from "@/hooks/use-telegram";
import {
  Shield,
  BarChart3,
  Tag,
  History,
  Users,
  DollarSign,
  Activity,
  ArrowLeft,
} from "@/components/ui/custom-icons";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Link } from "wouter";

type AdminStats = {
  totalUsers?: number;
  todaySales?: number;
  activeReferrals?: number;
  recentTransactions?: Array<{
    id: string | number;
    username: string;
    description?: string;
    status?: "completed" | "failed" | "pending" | string;
    createdAt?: string;
  }>;
};

type CurrentSettings = {
  stars_price?: string | number;
  ton_markup_percentage?: string | number;
  ton_price_cache_minutes?: string | number;
  ton_fallback_price?: string | number;
  bot_base_url?: string;
  referral_prefix?: string;
  referral_bonus_percentage?: string | number;
  referral_registration_bonus?: string | number;
};

type TONPriceData = {
  price: string;
};

export default function AdminPage(): JSX.Element {
  const [starsPrice, setStarsPrice] = useState<string>("");
  const [tonMarkupPercentage, setTonMarkupPercentage] = useState<string>("");
  const [tonCacheMinutes, setTonCacheMinutes] = useState<string>("");
  const [tonFallbackPrice, setTonFallbackPrice] = useState<string>("");
  const [botBaseUrl, setBotBaseUrl] = useState<string>("");
  const [referralPrefix, setReferralPrefix] = useState<string>("");
  const [referralBonusPercentage, setReferralBonusPercentage] = useState<string>("");
  const [referralRegistrationBonus, setReferralRegistrationBonus] = useState<string>("");
  const { toast } = useToast();
  const { hapticFeedback } = useTelegram();
  const queryClient = useQueryClient();

  const normalizeToStringNumber = (value: any, fallback: string = ""): string => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ null, undefined, –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    if (value === null || value === undefined || value === "") {
      return fallback;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
    if (typeof value === "string") {
      const trimmed = value.trim();
      if (trimmed === "") return fallback;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
      const num = parseFloat(trimmed.replace(",", "."));
      return Number.isFinite(num) ? trimmed : fallback;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    if (typeof value === "number" && Number.isFinite(value)) {
      return String(value);
    }
    // –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
    return fallback;
  };

  const parseNumberOrNaN = (s: string) => {
    if (typeof s !== "string") return NaN;
    const cleaned = s.trim().replace(",", ".");
    const n = parseFloat(cleaned);
    return Number.isFinite(n) ? n : NaN;
  };

  // –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const { data: currentSettings } = useQuery<CurrentSettings, Error>({
    queryKey: ["/api/admin/settings/current"],
    queryFn: async () => {
      const res = await fetch("/api/admin/settings/current", {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      if (!res.ok) throw new Error(`Failed to fetch current settings: ${res.status}`);
      return res.json();
    },
    staleTime: 1000 * 60 * 5,
  });

  // üöÄ –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã TON
  const { data: tonPriceData, isLoading: isTonPriceLoading } = useQuery<TONPriceData, Error>({
    queryKey: ["/api/ton-price"],
    queryFn: async () => {
      const res = await fetch("/api/ton-price", {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      if (!res.ok) throw new Error(`Failed to fetch TON price: ${res.status}`);
      return res.json();
    },
    refetchInterval: 60000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    staleTime: 30000, // –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ 30 —Å–µ–∫—É–Ω–¥
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
  });

  useEffect(() => {
    if (!currentSettings) return;
    
    console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", currentSettings);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    setStarsPrice(normalizeToStringNumber(currentSettings.stars_price, "1.50"));
    setTonMarkupPercentage(normalizeToStringNumber(currentSettings.ton_markup_percentage, "5.0"));
    setTonCacheMinutes(normalizeToStringNumber(currentSettings.ton_price_cache_minutes, "15"));
    setTonFallbackPrice(normalizeToStringNumber(currentSettings.ton_fallback_price, "420.0"));
    setReferralRegistrationBonus(normalizeToStringNumber(currentSettings.referral_registration_bonus, "25.0"));
    
    setBotBaseUrl(currentSettings.bot_base_url || "https://t.me/starsguru_official_bot");
    setReferralPrefix(currentSettings.referral_prefix || "ref");
    setReferralBonusPercentage(normalizeToStringNumber(currentSettings.referral_bonus_percentage, "5.0"));
    
    console.log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
  }, [currentSettings]);

  const { data: adminStats } = useQuery<AdminStats, Error>({
    queryKey: ["/api/admin/stats"],
    queryFn: async () => {
      const res = await fetch("/api/admin/stats", {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      if (!res.ok) throw new Error(`Failed to fetch admin stats: ${res.status}`);
      return res.json() as Promise<AdminStats>;
    },
    staleTime: 1000 * 30,
  });

  // üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è –º—É—Ç–∞—Ü–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º TON —Ü–µ–Ω—ã
  const updateSettingsMutation = useMutation({
    mutationFn: async (payload: Record<string, any>) => {
      console.log("üî• [mutationFn] –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:", payload);
      
      const res = await fetch("/api/admin/settings", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      
      const text = await res.text().catch(() => "");
      console.log(`üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (${res.status}):`, text);
      
      let json;
      try {
        json = text ? JSON.parse(text) : null;
      } catch {
        json = text;
      }
      
      if (!res.ok) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:", res.status, json);
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${res.status} ${JSON.stringify(json)}`);
      }
      
      return json;
    },
    onSuccess: (data) => {
      console.log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", data);
      hapticFeedback("success");
      
      // –ë–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      let description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã";
      
      // üöÄ –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å —Ü–µ–Ω–∞ TON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (data?.ton_price_updated && data?.new_ton_price) {
        description = `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ù–æ–≤–∞—è —Ü–µ–Ω–∞ TON: ‚ÇΩ${data.new_ton_price}`;
      }
      
      toast({ 
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", 
        description: description
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
      queryClient.invalidateQueries({ queryKey: ["/api/admin/settings/current"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/stats"] });
      
      // üöÄ –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–® –¶–ï–ù–´ TON
      if (data?.ton_price_updated) {
        console.log("üîÑ TON price updated, refreshing price cache...");
        queryClient.invalidateQueries({ queryKey: ["/api/ton-price"] });
      }
    },
    onError: (err: any) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", err);
      hapticFeedback("error");
      toast({ 
        title: "–û—à–∏–±–∫–∞", 
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${err.message}`, 
        variant: "destructive" 
      });
    },
  });

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const handleUpdatePrices = () => {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö TON –ø–æ–ª–µ–π
    if (!starsPrice || !botBaseUrl || !referralPrefix || !referralBonusPercentage || 
        !tonMarkupPercentage || !referralRegistrationBonus || 
        !tonCacheMinutes || !tonFallbackPrice) {
      toast({ 
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 
        description: "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", 
        variant: "destructive" 
      });
      return;
    }

    const s = parseNumberOrNaN(starsPrice);
    const rbp = parseNumberOrNaN(referralBonusPercentage);
    const tmp = parseNumberOrNaN(tonMarkupPercentage);
    const tcm = parseNumberOrNaN(tonCacheMinutes);
    const tfp = parseNumberOrNaN(tonFallbackPrice);
    const rrb = parseNumberOrNaN(referralRegistrationBonus);

    if (Number.isNaN(s) || Number.isNaN(rbp) || Number.isNaN(tmp) || 
        Number.isNaN(tcm) || Number.isNaN(tfp) || Number.isNaN(rrb)) {
      toast({ 
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.", 
        variant: "destructive" 
      });
      return;
    }
    
    if (s <= 0 || rbp < 0 || tmp < 0 || tcm <= 0 || tfp <= 0 || rrb < 0) {
      toast({ 
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 
        description: "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏.", 
        variant: "destructive" 
      });
      return;
    }

    // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
    updateSettingsMutation.mutate({
      stars_price: starsPrice,
      ton_markup_percentage: tonMarkupPercentage,
      ton_price_cache_minutes: tonCacheMinutes,
      ton_fallback_price: tonFallbackPrice,
      referral_registration_bonus: referralRegistrationBonus,
      bot_base_url: botBaseUrl,
      referral_prefix: referralPrefix,
      referral_bonus_percentage: referralBonusPercentage,
    });
  };

  return (
    <div className="min-h-screen bg-white dark:bg-[#0E0E10] text-gray-900 dark:text-white">
      <header className="sticky top-0 z-50 bg-white/80 dark:bg-[#0E0E10]/80 backdrop-blur-lg border-b border-gray-200 dark:border-white/10">
        <div className="flex items-center justify-between p-4">
          <Link href="/">
            <Button variant="ghost" size="icon" aria-label="Back">
              <ArrowLeft className="w-4 h-4" />
            </Button>
          </Link>
          <h1 className="text-lg font-bold flex items-center">
            <Shield className="w-5 h-5 text-[#4E7FFF] mr-2" /> –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
          </h1>
          <div style={{ width: 36 }} />
        </div>
      </header>

      <main className="p-4 space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <motion.div className="bg-white dark:bg-[#1A1A1C] rounded-xl p-4 shadow-lg" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <h3 className="font-semibold mb-3 flex items-center"><BarChart3 className="w-4 h-4 text-green-500 mr-2" />–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400 flex items-center"><Users className="w-4 h-4 mr-1" />–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span>
                <span className="font-semibold">{adminStats?.totalUsers ?? 0}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400 flex items-center"><DollarSign className="w-4 h-4 mr-1" />–ü—Ä–æ–¥–∞–∂ —Å–µ–≥–æ–¥–Ω—è</span>
                <span className="font-semibold text-green-500">‚ÇΩ{adminStats?.todaySales ?? 0}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400 flex items-center"><Activity className="w-4 h-4 mr-1" />–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</span>
                <span className="font-semibold">{adminStats?.activeReferrals ?? 0}</span>
              </div>
            </div>
          </motion.div>

          {/* Price Settings */}
          <motion.div
            className="bg-gray-50 dark:bg-[#0E0E10] rounded-xl p-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
          >
            <h3 className="font-semibold mb-3 flex items-center">
              <Tag className="w-4 h-4 text-green-500 mr-2" />
              –¶–µ–Ω—ã
            </h3>
            <div className="space-y-4">
              <div>
                <Label>–¶–µ–Ω–∞ Stars (‚ÇΩ)</Label>
                <Input
                  type="number"
                  step="0.01"
                  value={starsPrice}
                  onChange={(e) => setStarsPrice(e.target.value)}
                  placeholder="1.50"
                />
              </div>
              <Button
                onClick={handleUpdatePrices}
                disabled={updateSettingsMutation.isPending}
                className="w-full"
              >
                {updateSettingsMutation.isPending
                  ? "–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è..."
                  : "–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"}
              </Button>
            </div>
          </motion.div>

          {/* TON Dynamic Pricing */}
          <motion.div
            className="bg-gray-50 dark:bg-[#0E0E10] rounded-xl p-4 md:col-span-2"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <h3 className="font-semibold mb-3 flex items-center">
              üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ TON
              {updateSettingsMutation.isPending && (
                <div className="ml-2 animate-spin w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full" />
              )}
            </h3>
            
            {/* üöÄ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É TON */}
            {tonPriceData?.price && (
              <div className="mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ TON:</span>
                  <span className="font-bold text-lg text-blue-600">
                    {isTonPriceLoading ? (
                      <span className="animate-pulse">–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...</span>
                    ) : (
                      `‚ÇΩ${parseFloat(tonPriceData.price).toFixed(2)}`
                    )}
                  </span>
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                </div>
              </div>
            )}
            
            <div className="grid grid-cols-3 gap-4">
              <div>
                <Label>–ù–∞—Ü–µ–Ω–∫–∞ (%)</Label>
                <Input
                  type="number"
                  step="0.1"
                  value={tonMarkupPercentage}
                  onChange={(e) => setTonMarkupPercentage(e.target.value)}
                  placeholder="5"
                />
              </div>
              <div>
                <Label>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–∏–Ω)</Label>
                <Input
                  type="number"
                  value={tonCacheMinutes}
                  onChange={(e) => setTonCacheMinutes(e.target.value)}
                  placeholder="15"
                />
              </div>
              <div>
                <Label>–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</Label>
                <Input
                  type="number"
                  step="0.01"
                  value={tonFallbackPrice}
                  onChange={(e) => setTonFallbackPrice(e.target.value)}
                  placeholder="420"
                />
              </div>
            </div>
          </motion.div>

          {/* Referral Settings */}
          <motion.div
            className="bg-gray-50 dark:bg-[#0E0E10] rounded-xl p-4 md:col-span-2"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.25 }}
          >
            <h3 className="font-semibold mb-3 flex items-center">
              <Shield className="w-4 h-4 text-blue-500 mr-2" />
              –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>URL –±–æ—Ç–∞</Label>
                <Input
                  value={botBaseUrl}
                  onChange={(e) => setBotBaseUrl(e.target.value)}
                  placeholder="https://t.me/bot_name"
                />
              </div>
              <div>
                <Label>–ü—Ä–µ—Ñ–∏–∫—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</Label>
                <Input
                  value={referralPrefix}
                  onChange={(e) => setReferralPrefix(e.target.value)}
                  placeholder="ref"
                />
              </div>
              <div>
                <Label>–ü—Ä–æ—Ü–µ–Ω—Ç —Å –ø–æ–∫—É–ø–æ–∫ (%)</Label>
                <Input
                  type="number"
                  step="0.1"
                  value={referralBonusPercentage}
                  onChange={(e) => setReferralBonusPercentage(e.target.value)}
                  placeholder="5"
                />
              </div>
              <div>
                <Label>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∑–≤–µ–∑–¥—ã) üéÅ</Label>
                <Input
                  type="number"
                  value={referralRegistrationBonus}
                  onChange={(e) => setReferralRegistrationBonus(e.target.value)}
                  placeholder="25"
                />
              </div>
            </div>
          </motion.div>

          {/* Recent Transactions */}
          <motion.div
            className="bg-gray-50 dark:bg-[#0E0E10] rounded-xl p-4 md:col-span-2"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            <h3 className="font-semibold mb-3 flex items-center">
              <History className="w-4 h-4 text-[#4E7FFF] mr-2" />
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            </h3>
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {adminStats?.recentTransactions?.length ? (
                adminStats.recentTransactions.map((transaction, index) => (
                  <div
                    key={`${transaction.id}-${index}`}
                    className="flex justify-between items-center p-2 bg-white dark:bg-[#1A1A1C] rounded-lg"
                  >
                    <div>
                      <p className="font-medium">{transaction.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {transaction.description || '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className={`text-sm font-semibold ${
                        transaction.status === 'completed' ? 'text-green-500' : 
                        transaction.status === 'failed' ? 'text-red-500' : 'text-yellow-500'
                      }`}>
                        {transaction.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : 
                        transaction.status === 'failed' ? '–ù–µ —É–¥–∞–ª–æ—Å—å' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                      </p>
                      <p className="text-xs text-gray-500">
                        {transaction.createdAt ? new Date(transaction.createdAt).toLocaleDateString() : ''}
                      </p>
                    </div>
                  </div>
                ))
              ) : (
                <p className="text-gray-500 text-center py-4">–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
              )}
            </div>
          </motion.div>
        </div>
      </main>
    </div>
  );
}