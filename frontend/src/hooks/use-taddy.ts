// src/hooks/use-taddy.ts

import { useEffect, useRef } from 'react';
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';

// –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Window
declare global {
  interface Window {
    Taddy?: {
      init(pubId: string): void;
      ready(): void;
      exchange(): {
        feed(params: {
          limit?: number;
          imageFormat?: 'png' | 'webp' | 'jpg';
          autoImpressions?: boolean;
          showCompleted?: boolean;
        }): Promise<any[]>;
        impressions(items: any[]): void;
        open(item: any, autoCheck?: boolean): Promise<void>;
        check(item: any): Promise<boolean>;
      };
      ads(): {
        interstitial(params?: {
          onClosed?: () => void;
          onViewThrough?: (id: string) => void;
        }): Promise<boolean>;
      };
    };
  }
}

interface TaddySettings {
  enabled: boolean;
  pubId: string;
}

export function useTaddy() {
  const initRef = useRef(false);
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Taddy –∏–∑ –∞–¥–º–∏–Ω–∫–∏
  const { data: settings, isLoading } = useQuery({
    queryKey: ['/api/admin/settings/current'],
    queryFn: async () => {
      const response = await apiRequest('GET', '/api/admin/settings/current');
      const data = await response.json();
      return {
        enabled: data.taddy_enabled === 'true',
        pubId: data.taddy_pub_id || '',
      } as TaddySettings;
    },
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –∫—ç—à–∞
    refetchOnWindowFocus: false,
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Taddy SDK
  useEffect(() => {
    if (isLoading || !settings?.enabled || !settings?.pubId || initRef.current) {
      return;
    }

    const initTaddy = () => {
      if (window.Taddy) {
        try {
          console.log('üéØ Initializing Taddy SDK with pubId:', settings.pubId);
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Taddy
          window.Taddy.init(settings.pubId);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ready event –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞
          window.Taddy.ready();
          
          initRef.current = true;
          console.log('‚úÖ Taddy SDK initialized successfully');
          
        } catch (error) {
          console.error('‚ùå Taddy initialization failed:', error);
        }
      } else {
        console.warn('‚ö†Ô∏è Taddy SDK not loaded');
      }
    };

    // –ï—Å–ª–∏ Taddy —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (window.Taddy) {
      initTaddy();
    } else {
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ SDK
      const checkTaddy = setInterval(() => {
        if (window.Taddy) {
          initTaddy();
          clearInterval(checkTaddy);
        }
      }, 100);

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        clearInterval(checkTaddy);
        if (!initRef.current) {
          console.error('‚ùå Taddy SDK failed to load within 5 seconds');
        }
      }, 5000);
    }
  }, [settings?.enabled, settings?.pubId, isLoading]);

  return {
    isEnabled: settings?.enabled ?? false,
    isInitialized: initRef.current,
    taddy: window.Taddy || null,
    settings,
    isLoading,
  };
}